/*322. Coin Change
You are given an integer array coins representing coins of different denominations 
and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.
*/


class Solution 
{
    public int coinChange(int[] coins, int amt) 
    {
        int n = coins.length;
        int dp[] = new int[amt+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        int res = 0;
        
        
        List<Integer> list = new ArrayList<Integer> ();
        for(int i = 0; i<n; i++)
            list.add(coins[i]);
        Collections.sort(list);
        
        if(amt==0)
            return 0;
        if(amt<list.get(0))
            return -1;
        
        dp[0] = 0;
        for(int i = 1; i<=amt; i++)
        {
            /*
            1 3 4 5 and amt = 7
            dp[1]    = does the coin 1 exist? Yes. = 1
            dp[2] = does 2 coin exist? No. Check in coins<2. 1 + dp[1] = 2. No more coins
            dp[3]    = does 3 coin exist? Yes. = 1 
            dp[4]    = does 4 coin exist? Yes. = 1 
            dp[5]    = does 4 coin exist? Yes. = 1 
            dp[6] = coin 5 + dp[1] = 2
                    coin 4 + dp[2] = 3
                    coin 3 + dp[3] = 2
                    coin 1 + dp[5] = 2      = 2
            dp[7] = coin 5 + dp[2] = 3
                    coin 4 + dp[3] = 2
                    coin 3 + dp[4] = 2
                    coin 1 + dp[6] = 3      = 3
            */
            if(list.contains(i))
            {    
                dp[i] = 1;
                continue;
            }
            int sum = 0;
            for(int j = 0; j<n; j++)
            {
                sum = i - coins[j];
            
                if(sum<0)
                {
                    continue;
                }
 
                if(dp[i] == Integer.MAX_VALUE && dp[sum] == Integer.MAX_VALUE)
                    continue;
                if(dp[sum] != Integer.MAX_VALUE)
                    dp[i] = (int)Math.min(dp[i], dp[sum] + 1);
            }
        }
        if(dp[amt]==Integer.MAX_VALUE || dp[amt] < 0)
            return -1;
        return dp[amt];
    }
}