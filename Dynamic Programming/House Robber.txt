/* 198. House Robber
You are a professional robber planning to rob houses along a street. 
Each house has a certain amount of money stashed, the only constraint stopping you from 
robbing each of them is that adjacent houses have security systems connected and it will 
automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum 
amount of money you can rob tonight without alerting the police.
*/



class Solution 
{
    public int rob(int[] nums) 
    {
        int n = nums.length;
        int dp[] = new int[n];
        if(n==0)
            return 0;
        if(n==1)
            return nums[0];
        /* 2 1 1 2
        We can rob 2 or not rob it. If we rob 2, the max for array of length 1 is - 2
        We can rob 1 or not. If we rob it, we cannot rob 2. So we can either : rob 2 or rob 1,
            the max is  - 2
        We can rob 1 or not. If we rob it, the res would be 3 otherwise 1. So max = 3
        We can rob 2 or not. If we rob it, the res is 2 + 2. Otherwise it is 3. So max - 4
        If we rob a house, dp[i] = dp[i-2] + nums[i]
        Otherwise, dp[i] = dp[i-1]
        
        So, dp[i] = max (  (dp[i-2]+nums[i]) , (dp[i-1])  )
        */
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        
        int res = Math.max(dp[0], dp[1]);
        for(int i = 2; i<n; i++)
        {
            dp[i] = Math.max (  (dp[i-2]+nums[i]) , (dp[i-1])  );
            res = dp[i]>res ? dp[i] : res;
        }
        return res;
    }
}