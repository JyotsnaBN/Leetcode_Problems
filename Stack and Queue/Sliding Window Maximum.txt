//239. Sliding Window Maximum
//You are given an array of integers nums, there is a sliding window of size k which is 
//moving from the very left of the array to the very right. You can only see the k 
//numbers in the window. Each time the sliding window moves right by one position.


class Solution 
{
    public int[] maxSlidingWindow(int[] arr, int k) 
    {
        int n = arr.length;

        int res[] = new int[n-k+1];
        if(n==1)
        {
            res[0] = arr[0];
            return res;
        }
        int max = arr[0];
        // Keep a map with the elements in the window and their count
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i<k; i++)
        {//add the first k elements into the map
            if(map.containsKey(arr[i]))
                map.put(arr[i], map.get(arr[i])+1);
            else
                map.put(arr[i], 1);
            if(arr[i]>max)//Calculate the max of the 1st window
                max = arr[i];
        }
        res[0] = max;
        for(int i = 1; i<=n-k; i++)
        {
            if(map.containsKey(arr[i+k-1]))
                map.put(arr[i+k-1], map.get(arr[i+k-1])+1);
            else
                map.put(arr[i+k-1], 1);
            
            map.put(arr[i-1], map.get(arr[i-1])-1);// remove the element before the current sliding window
            
            
            if(arr[i+k-1]>max)
            {
                max = arr[i+k-1];   
                res[i] = max;
                continue;
            }
            if(arr[i-1]== max && map.get(arr[i-1])==0)
            {
                max = arr[i];
                for(int j = i; j<i+k; j++)
                {
                    if(max<arr[j])
                        max = arr[j];
                }
                res[i] = max;
            }
            else
                res[i] = max;
        }

        return res;
    }
}