/*25. Reverse Nodes in k-Group
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes 
is not a multiple of k then left-out nodes, in the end, should remain as it is.
*/

class Solution 
{
    public ListNode reverseKGroup(ListNode head, int k) 
    {
        ListNode trav = head;
        int len = 0;
        ListNode curr = head;
        ListNode kplusone = head;
        ListNode prev = new ListNode(), temp = new ListNode(), fh = new ListNode();
        
        if(head.next == null || k == 1)
            return head;
        
        boolean flag = true;
        
        int i = 0;
        
        while(trav!=null)
        {
            len++;
            trav = trav.next;
        }
        if(k>len)
            k = len;
        
        
        while(i<(len/k))
        {
            int c = 0;
            while(c<k)
            {
                if(kplusone!=null)
                {
                    temp = kplusone;
                    kplusone = kplusone.next;
                    c++;
                }
                
            }
            if(c<k && kplusone==null)
                break;
            
            if(flag)
            {
                fh = temp;
                flag = false;
            }
            prev = kplusone;
            if(i>0)
            {
            //null
                head.next = temp;//1.next = 4
                head = curr;// head = 4
            }
            while(curr!=kplusone)
            {
                temp = curr.next;
                curr.next = prev;
                prev = curr;
                curr = temp;
            }
            i++;
                
        }
        
        
        return fh;
        
        
    }
}