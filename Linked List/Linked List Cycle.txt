/*141. Linked List Cycle
Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached 
again by continuously following the next pointer. Internally, pos is used to denote 
the index of the node that tail's next pointer is connected to. Note that pos is not 
passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.
*/


public class Solution 
{
    public boolean hasCycle(ListNode head) 
    {
        /*Method 1 - Hashing
        Set<ListNode> set = new HashSet<ListNode> ();
        
        while(head!=null)
        {
            if(set.contains(head))
                return true;
            else
                set.add(head);
            head = head.next;
        }
        return false;*/


        // Method 2 - fast and slow pointer.... if fast reaches null, return false..... if fast=slow, return true
        ListNode fast = head, slow = head;
        while(fast!=null && fast.next!=null && fast.next.next!=null)
        {
            fast = fast.next.next;
            slow = slow.next;
            if(fast==slow)
                return true;
        }
        return false;


    }
}