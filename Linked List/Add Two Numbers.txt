/*2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/

class Solution 
{
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode head = new ListNode();
        ListNode res = head;
        int rem = 0, sum = 0;
        int c = 1;
        while(l1!=null && l2!=null)
        {
            sum = 0;
            sum = l1.val + l2.val + rem;
            rem = 0;
            if(sum>9)
            {
                rem = sum/10;
                sum = sum%10;
            }
            ListNode temp = new ListNode(sum);
            res.next = temp;
            l1 = l1.next;
            l2 = l2.next;
            res = res.next;
            System.out.println(c + " " + sum + " " + rem);
            c++;
        }
        while(l1!=null)
        {
            sum = 0;
            sum = l1.val + rem;
            rem = 0;
            if(sum>9)
            {
                rem = sum/10;
                sum = sum%10;
            }
            ListNode temp = new ListNode(sum);
            res.next = temp;
            l1 = l1.next;
            res = res.next;
            System.out.println(c + " " + sum + " " + rem);
            c++;
        }
        
        while(l2!=null)
        {
            sum = 0;
            sum = l2.val + rem;
            rem = 0;
            if(sum>9)
            {
                rem = sum/10;
                sum = sum%10;
            }
            ListNode temp = new ListNode(sum);
            res.next = temp;
            l2 = l2.next;
            res = res.next;
            System.out.println(c + " " + sum + " " + rem);
            c++;
        }
        if(rem!=0)
        {
            ListNode temp = new ListNode(rem);
            res.next = temp;
        }
        
        return head.next;
    }
}